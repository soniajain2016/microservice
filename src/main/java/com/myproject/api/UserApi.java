/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.myproject.api;

import com.myproject.exception.ResourceAlreadyExistException;
import com.myproject.model.User;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import io.swagger.annotations.*;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.security.Principal;
import java.util.List;


@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "add an user", nickname = "addUser", notes = "Adds an user to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "user created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing user already exists") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUser( @ApiParam(value = "User to be added"  )  @Valid @RequestBody User userToBeAdded) throws ResourceAlreadyExistException;


    @ApiOperation(value = "searches user", nickname = "searchUser", notes = "By passing in the appropriate options, you can search for available user in the system ", response = User.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> searchUser(@ApiParam(value = "pass an optional search string for looking up user") @Valid @RequestParam(value = "searchString", required = false) String searchString,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "update an user", nickname = "updateUser", notes = "Update an user to the system", tags={ "admins", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "user updated"),
            @ApiResponse(code = 400, message = "invalid input, object invalid"),
            @ApiResponse(code = 409, message = "an user already exists") })
    @RequestMapping(value = "/users",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser( @ApiParam(value = "User to be Updated"  )  @Valid @RequestBody User user) throws ResourceAlreadyExistException;


}
